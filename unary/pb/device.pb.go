// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-rc.1
// 	protoc        v3.20.3
// source: unary/device.proto

package pb

import (
    reflect "reflect"
    sync "sync"

    protoreflect "google.golang.org/protobuf/reflect/protoreflect"
    protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeviceType int32

const (
	DeviceType_UNKNOWN DeviceType = 0
	DeviceType_SWITCH  DeviceType = 1
	DeviceType_AP      DeviceType = 2
	DeviceType_BGW     DeviceType = 3
	DeviceType_VPNC    DeviceType = 4
	DeviceType_MB      DeviceType = 5
)

// Enum value maps for DeviceType.
var (
	DeviceType_name = map[int32]string{
		0: "UNKNOWN",
		1: "SWITCH",
		2: "AP",
		3: "BGW",
		4: "VPNC",
		5: "MB",
	}
	DeviceType_value = map[string]int32{
		"UNKNOWN": 0,
		"SWITCH":  1,
		"AP":      2,
		"BGW":     3,
		"VPNC":    4,
		"MB":      5,
	}
)

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_unary_device_proto_enumTypes[0].Descriptor()
}

func (DeviceType) Type() protoreflect.EnumType {
	return &file_unary_device_proto_enumTypes[0]
}

func (x DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceType.Descriptor instead.
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_unary_device_proto_rawDescGZIP(), []int{0}
}

// DeviceRequest is the request message containing the device serial number.
// Either 'serial' or 'mac_addr' must be provided to identify the device.
type DeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DeviceId:
	//
	//	*DeviceRequest_Serial
	//	*DeviceRequest_MacAddr
	DeviceId isDeviceRequest_DeviceId `protobuf_oneof:"DeviceId"`
}

func (x *DeviceRequest) Reset() {
	*x = DeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unary_device_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRequest) ProtoMessage() {}

func (x *DeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_unary_device_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRequest.ProtoReflect.Descriptor instead.
func (*DeviceRequest) Descriptor() ([]byte, []int) {
	return file_unary_device_proto_rawDescGZIP(), []int{0}
}

func (m *DeviceRequest) GetDeviceId() isDeviceRequest_DeviceId {
	if m != nil {
		return m.DeviceId
	}
	return nil
}

func (x *DeviceRequest) GetSerial() string {
	if x, ok := x.GetDeviceId().(*DeviceRequest_Serial); ok {
		return x.Serial
	}
	return ""
}

func (x *DeviceRequest) GetMacAddr() string {
	if x, ok := x.GetDeviceId().(*DeviceRequest_MacAddr); ok {
		return x.MacAddr
	}
	return ""
}

type isDeviceRequest_DeviceId interface {
	isDeviceRequest_DeviceId()
}

type DeviceRequest_Serial struct {
	Serial string `protobuf:"bytes,1,opt,name=serial,proto3,oneof"`
}

type DeviceRequest_MacAddr struct {
	MacAddr string `protobuf:"bytes,2,opt,name=mac_addr,json=macAddr,proto3,oneof"`
}

func (*DeviceRequest_Serial) isDeviceRequest_DeviceId() {}

func (*DeviceRequest_MacAddr) isDeviceRequest_DeviceId() {}

// Device is the response message containing device information.
// The 'connected' field indicates whether the device is currently connected.
type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Serial    string     `protobuf:"bytes,1,opt,name=serial,proto3" json:"serial,omitempty"`
	MacAddr   string     `protobuf:"bytes,2,opt,name=mac_addr,json=macAddr,proto3" json:"mac_addr,omitempty"`
	Type      DeviceType `protobuf:"varint,3,opt,name=type,proto3,enum=unary.DeviceType" json:"type,omitempty"`
	Connected bool       `protobuf:"varint,4,opt,name=connected,proto3" json:"connected,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unary_device_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_unary_device_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_unary_device_proto_rawDescGZIP(), []int{1}
}

func (x *Device) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *Device) GetMacAddr() string {
	if x != nil {
		return x.MacAddr
	}
	return ""
}

func (x *Device) GetType() DeviceType {
	if x != nil {
		return x.Type
	}
	return DeviceType_UNKNOWN
}

func (x *Device) GetConnected() bool {
	if x != nil {
		return x.Connected
	}
	return false
}

var File_unary_device_proto protoreflect.FileDescriptor

var file_unary_device_proto_rawDesc = []byte{
	0x0a, 0x12, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x22, 0x52, 0x0a, 0x0d, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x06,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x08, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22,
	0x80, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x25, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x75, 0x6e,
	0x61, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x2a, 0x48, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x50, 0x10,
	0x02, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x47, 0x57, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x50,
	0x4e, 0x43, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x4d, 0x42, 0x10, 0x05, 0x32, 0x3e, 0x0a, 0x0a,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14, 0x2e, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x75, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x09, 0x5a, 0x07,
	0x2e, 0x2f, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_unary_device_proto_rawDescOnce sync.Once
	file_unary_device_proto_rawDescData = file_unary_device_proto_rawDesc
)

func file_unary_device_proto_rawDescGZIP() []byte {
	file_unary_device_proto_rawDescOnce.Do(func() {
		file_unary_device_proto_rawDescData = protoimpl.X.CompressGZIP(file_unary_device_proto_rawDescData)
	})
	return file_unary_device_proto_rawDescData
}

var file_unary_device_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_unary_device_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_unary_device_proto_goTypes = []interface{}{
	(DeviceType)(0),       // 0: unary.DeviceType
	(*DeviceRequest)(nil), // 1: unary.DeviceRequest
	(*Device)(nil),        // 2: unary.Device
}
var file_unary_device_proto_depIdxs = []int32{
	0, // 0: unary.Device.type:type_name -> unary.DeviceType
	1, // 1: unary.DeviceInfo.GetDevice:input_type -> unary.DeviceRequest
	2, // 2: unary.DeviceInfo.GetDevice:output_type -> unary.Device
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_unary_device_proto_init() }
func file_unary_device_proto_init() {
	if File_unary_device_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_unary_device_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unary_device_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_unary_device_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*DeviceRequest_Serial)(nil),
		(*DeviceRequest_MacAddr)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_unary_device_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_unary_device_proto_goTypes,
		DependencyIndexes: file_unary_device_proto_depIdxs,
		EnumInfos:         file_unary_device_proto_enumTypes,
		MessageInfos:      file_unary_device_proto_msgTypes,
	}.Build()
	File_unary_device_proto = out.File
	file_unary_device_proto_rawDesc = nil
	file_unary_device_proto_goTypes = nil
	file_unary_device_proto_depIdxs = nil
}
